{"version":3,"sources":["Button.tsx","TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","onClick","onClickHandler","title","TodoList","tasks","map","task","removeTask","id","type","checked","isDone","changeFilter","App","useState","setTasks","filter","setFilter","tasksForTodolist","flt","className","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAOaA,EAAS,SAACC,GAEnB,OACI,wBAAQC,QAFK,kBAAMD,EAAME,kBAEzB,SAA4BF,EAAMG,SCCnC,SAASC,EAASJ,GACrB,OAAO,gCACH,6BAAKA,EAAMG,QACX,gCACI,0BACA,0CAEJ,6BACKH,EAAMK,MACFC,KAAI,SAAAC,GAAI,OACL,+BACI,cAAC,EAAD,CAAQJ,MAAO,IAAKD,eAAgB,kBAAMF,EAAMQ,WAAWD,EAAKE,OAChE,uBAAOC,KAAM,WAAYC,QAASJ,EAAKK,SACvC,+BAAOL,EAAKJ,UAHPI,EAAKE,SAM1B,gCACI,cAAC,EAAD,CAAQN,MAAO,MAAOD,eAAgB,kBAAIF,EAAMa,aAAa,UAC7D,cAAC,EAAD,CAAQV,MAAO,SAAUD,eAAgB,kBAAMF,EAAMa,aAAa,aAClE,cAAC,EAAD,CAAQV,MAAO,YAAaD,eAAgB,kBAAIF,EAAMa,aAAa,sBClBxE,SAASC,IAAO,IAAD,EACQC,mBAA2B,CACjD,CAACN,GAAI,EAAGN,MAAO,WAAYS,QAAQ,GACnC,CAACH,GAAI,EAAGN,MAAO,aAAcS,QAAQ,GACrC,CAACH,GAAI,EAAGN,MAAO,QAASS,QAAQ,GAChC,CAACH,GAAI,EAAGN,MAAO,aAAcS,QAAQ,GACrC,CAACH,GAAI,EAAGN,MAAO,SAAUS,QAAQ,GACjC,CAACH,GAAI,EAAGN,MAAO,WAAYS,QAAQ,KAPrB,mBACXP,EADW,KACJW,EADI,OASQD,mBAAqB,OAT7B,mBASbE,EATa,KASLC,EATK,KAWdC,EAAmBd,EAER,WAAXY,IACAE,EAAmBA,EAAiBF,QAAO,SAAAG,GAAG,OAAKA,EAAIR,WAG5C,cAAXK,IACAE,EAAmBA,EAAiBF,QAAO,SAAAG,GAAG,OAAIA,EAAIR,WAU1D,OACI,qBAAKS,UAAU,MAAf,SACI,cAACjB,EAAD,CAAUD,MAAO,gBACPE,MAAOc,EACPX,WAXC,SAACC,GAChBO,EAASX,EAAMY,QAAO,SAAAV,GAAI,OAAIA,EAAKE,KAAOA,OAW5BI,aATG,SAACS,GAClBJ,EAAUI,QCnClB,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.5acf012f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    onClickHandler: () => void\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n    const callback = () => props.onClickHandler()\r\n    return (\r\n        <button onClick={callback}>{props.title}</button>\r\n    );\r\n};\r\n\r\n","import React from \"react\";\r\nimport {FilterType, TasksType} from \"./App\";\r\nimport {Button} from \"./Button\";\r\n\r\ntype TodoListPropsType = {\r\n    title: string\r\n    tasks: Array<TasksType>\r\n    removeTask: (id: number) => void\r\n    changeFilter: (filter: FilterType) => void\r\n}\r\n\r\nexport function TodoList(props: TodoListPropsType) {\r\n    return <div>\r\n        <h3>{props.title}</h3>\r\n        <div>\r\n            <input/>\r\n            <button>+</button>\r\n        </div>\r\n        <ul>\r\n            {props.tasks\r\n                .map(task =>\r\n                    <li key={task.id}>\r\n                        <Button title={'x'} onClickHandler={() => props.removeTask(task.id)}/>\r\n                        <input type={'checkbox'} checked={task.isDone}/>\r\n                        <span>{task.title}</span>\r\n                    </li>)}\r\n        </ul>\r\n        <div>\r\n            <Button title={'All'} onClickHandler={()=>props.changeFilter('all')}/>\r\n            <Button title={'Active'} onClickHandler={() => props.changeFilter('active')}/>\r\n            <Button title={'Completed'} onClickHandler={()=>props.changeFilter('completed')}/>\r\n        </div>\r\n    </div>\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {TodoList} from \"./TodoList\";\n\nexport type TasksType = {\n    id: number\n    title: string\n    isDone: boolean\n}\n\nexport type FilterType = 'all' | 'active' | 'completed'\n\nexport function App() {\n    const [tasks, setTasks] = useState<Array<TasksType>>([\n        {id: 1, title: 'HTML&CSS', isDone: true},\n        {id: 2, title: 'Vanilla JS', isDone: true},\n        {id: 3, title: 'React', isDone: false},\n        {id: 4, title: 'Git/Github', isDone: false},\n        {id: 5, title: 'NodeJS', isDone: false},\n        {id: 6, title: 'REST API', isDone: false},\n    ])\n    let [filter, setFilter] = useState<FilterType>('all')\n\n    let tasksForTodolist = tasks\n\n    if (filter === 'active') {\n        tasksForTodolist = tasksForTodolist.filter(flt => !flt.isDone)\n    }\n\n    if (filter === 'completed') {\n        tasksForTodolist = tasksForTodolist.filter(flt => flt.isDone)\n    }\n\n    const removeTask = (id: number) => {\n        setTasks(tasks.filter(task => task.id !== id))\n    }\n    const changeFilter = (value: FilterType) => {\n        setFilter(value)\n    }\n\n    return (\n        <div className=\"App\">\n            <TodoList title={'What to learn'}\n                      tasks={tasksForTodolist}\n                      removeTask={removeTask}\n                      changeFilter={changeFilter}\n            />\n        </div>\n    );\n}\n\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}