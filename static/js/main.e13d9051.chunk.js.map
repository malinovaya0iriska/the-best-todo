{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddItemForm","addItem","useState","title","setTitle","error","setError","onAddTaskClickHandler","trim","TextField","variant","className","onChange","e","currentTarget","value","onKeyPress","key","label","helperText","IconButton","color","size","onClick","AddBox","EditableSpan","editMode","setEditMode","type","autoFocus","onBlur","onDoubleClick","TodoList","props","newTitle","changeTodoTitle","id","removeTodolist","addTask","tasks","map","task","isDone","Checkbox","checked","changeTaskStatus","changeTaskTitle","removeTask","Button","filter","changeFilter","App","todolist_1_Id","v1","todolist_2_Id","todolists","setTodolists","setTasks","todolistId","tl","newTasks","t","AppBar","position","Toolbar","style","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","newTodoId","spacing","tasksForTodolist","flt","item","Paper","elevation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e13d9051.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport TextField from \"@mui/material/TextField/TextField\";\r\nimport {AddBox} from \"@mui/icons-material/\";\r\n\r\ntype PropsType = {\r\n    addItem: (title: string) => void\r\n}\r\nexport const AddItemForm: React.FC<PropsType> = ({addItem}) => {\r\n    const [title, setTitle] = useState<string>('')\r\n\r\n\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onTitleChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onAddTaskClickHandler = () => {\r\n        if (title.trim()) {\r\n            addItem(title.trim())\r\n            setTitle('')\r\n        } else setError('Heading is required!')\r\n    }\r\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.key === 'Enter') {\r\n            onAddTaskClickHandler()\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField error={!!error}\r\n                       variant={'outlined'}\r\n                       className={error ? 'error' : ''}\r\n                       onChange={onTitleChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       value={title}\r\n                       label={'enter you heading...'}\r\n                       helperText={error}\r\n            />\r\n            <IconButton color={'primary'} size={'large'} onClick={onAddTaskClickHandler}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {useState} from \"react\";\r\nimport TextField from \"@mui/material/TextField/TextField\";\r\n\r\ntype PropsType = {\r\n    value: string\r\n    onChange: (value: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<PropsType> = ({value, onChange}) => {\r\n    const [title, setTitle] = useState<string>(value)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const onDoubleClickHandler = () => {\r\n        setEditMode(true)\r\n    }\r\n    const setViewMode = () => {\r\n        setEditMode(false)\r\n        onChange(title)\r\n    }\r\n    const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n\r\n        editMode\r\n            ? <TextField variant={'outlined'} type={'text'} autoFocus value={title} onChange={onChangeHandler} onBlur={setViewMode}/>\r\n            : <span onDoubleClick={onDoubleClickHandler}>{value}</span>\r\n    )\r\n        ;\r\n};\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\nimport {FilterType, TaskType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Delete from \"@mui/icons-material/Delete\";\r\nimport Button from \"@mui/material/Button/Button\";\r\nimport Checkbox from \"@mui/material/Checkbox/Checkbox\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeFilter: (filter: FilterType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodoTitle: (newTitle: string, id: string) => void\r\n    changeTaskTitle: (newTitle: string, id: string, todolistId: string) => void\r\n}\r\n\r\nexport function TodoList(props: TodoListPropsType) {\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter('all', props.id)\r\n    const onActiveClickHandler = () => props.changeFilter('active', props.id)\r\n    const onCompleteClickHandler = () => props.changeFilter('completed', props.id)\r\n\r\n    const onRemoveTodoHandler = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodoTitleHandler = (newTitle: string) => props.changeTodoTitle(newTitle, props.id)\r\n\r\n    return <div>\r\n        <h3>\r\n            <EditableSpan value={props.title} onChange={changeTodoTitleHandler}/>\r\n            <IconButton onClick={onRemoveTodoHandler}><Delete/></IconButton>\r\n        </h3>\r\n\r\n        <AddItemForm addItem={addTask}/>\r\n\r\n        <ul>\r\n            {props.tasks\r\n                .map(task => {\r\n                        const changeTaskTitleHandler = (newTitle: string) => props.changeTaskTitle(newTitle, task.id, props.id)\r\n                        const onChangeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(task.id, e.currentTarget.checked, props.id)\r\n                        const onClickHandler = () => props.removeTask(task.id, props.id)\r\n                        return <li key={task.id} className={task.isDone ? 'is-done' : ''}>\r\n                            <Checkbox\r\n                                checked={task.isDone}\r\n                                color={\"secondary\"}\r\n                                onChange={onChangeTaskStatus}\r\n                            />\r\n                            <EditableSpan value={task.title} onChange={changeTaskTitleHandler}/>\r\n                            <IconButton onClick={onClickHandler}><Delete/></IconButton>\r\n                        </li>\r\n                    }\r\n                )}\r\n        </ul>\r\n        <div>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}>All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompleteClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n\r\n        </div>\r\n    </div>\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {TodoList} from \"./TodoList\";\nimport {v1} from \"uuid\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport Toolbar from \"@mui/material/Toolbar/Toolbar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport AppBar from \"@mui/material/AppBar/AppBar\";\nimport {Menu} from \"@mui/icons-material\";\nimport Typography from \"@mui/material/Typography/Typography\";\nimport Button from \"@mui/material/Button/Button\";\nimport Container from \"@mui/material/Container/Container\";\nimport Grid from \"@mui/material/Grid/Grid\";\nimport Paper from \"@mui/material/Paper/Paper\";\n\nexport type TasksType = {\n    [key: string]: TaskType []\n}\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\nexport type TodoType = {\n    id: string\n    title: string\n    filter: FilterType\n}\nexport type FilterType = 'all' | 'active' | 'completed'\n\nexport function App() {\n\n    const todolist_1_Id = v1()\n    const todolist_2_Id = v1()\n    const [todolists, setTodolists] = useState<Array<TodoType>>([\n        {id: todolist_1_Id, title: 'What to learn', filter: 'all'},\n        {id: todolist_2_Id, title: 'My hobbies', filter: 'all'},\n    ])\n\n    const [tasks, setTasks] = useState<TasksType>({\n        [todolist_1_Id]: [\n            {id: v1(), title: 'HTML&CSS', isDone: true},\n            {id: v1(), title: 'Vanilla JS', isDone: true},\n            {id: v1(), title: 'React', isDone: false},\n            {id: v1(), title: 'Git/Github', isDone: false},\n            {id: v1(), title: 'NodeJS', isDone: false},\n            {id: v1(), title: 'REST API', isDone: false},\n        ],\n        [todolist_2_Id]: [\n            {id: v1(), title: 'Hiking', isDone: true},\n            {id: v1(), title: 'Reading', isDone: true},\n            {id: v1(), title: 'Coding', isDone: false},\n            {id: v1(), title: 'Cooking', isDone: false},\n            {id: v1(), title: 'Running', isDone: false},\n            {id: v1(), title: 'Travelling', isDone: false},\n        ],\n    })\n\n    const changeFilter = (filter: FilterType, todolistId: string) => {\n        setTodolists(todolists.map(tl => tl.id === todolistId ? {...tl, filter} : tl))\n    }\n    const removeTodolist = (todolistId: string) => {\n        setTodolists(todolists.filter(tl => tl.id !== todolistId))\n    }\n    const addTodolist = (title: string) => {\n        let newTodoId = v1()\n        setTodolists([{id: newTodoId, title, filter: 'all'}, ...todolists])\n        setTasks({...tasks, [newTodoId]: []})\n    }\n    const changeTodoTitle = (title: string, id: string) => {\n        setTodolists(todolists.map(tl => tl.id === id ? {...tl, title} : tl))\n    }\n    const removeTask = (id: string, todolistId: string) => {\n        let newTasks = tasks[todolistId].filter(t => t.id !== id)\n        setTasks({...tasks, [todolistId]: newTasks})\n    }\n    const changeTaskStatus = (id: string, isDone: boolean, todolistId: string) => {\n        let newTasks = tasks[todolistId].map(t => t.id === id ? {...t, isDone} : t)\n        setTasks({...tasks, [todolistId]: newTasks})\n    }\n\n    const addTask = (title: string, todolistId: string) => {\n        setTasks({...tasks, [todolistId]: [{id: v1(), title: title.trim(), isDone: false}, ...tasks[todolistId]]})\n    }\n\n    const changeTaskTitle = (title: string, id: string, todolistId: string) => {\n        let newTasks = tasks[todolistId].map(t => t.id === id ? {...t, title} : t)\n        setTasks({...tasks, [todolistId]: newTasks})\n\n    }\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar style={{justifyContent: 'space-between'}}>\n                    <IconButton edge={'start'} color={'inherit'} aria-label={'menu'}>\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant={'h6'}>\n                        News\n                    </Typography>\n                    <Button variant={'outlined'} color={'inherit'}>Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container style={{padding: '30px 0'}}>\n                    <AddItemForm addItem={addTodolist}/>\n                </Grid>\n                <Grid container spacing={10}>\n                    {todolists.map(tl => {\n                        let tasksForTodolist = tasks[tl.id]\n\n                        if (tl.filter === 'active') {\n                            tasksForTodolist = tasksForTodolist.filter(flt => !flt.isDone)\n                        }\n\n                        if (tl.filter === 'completed') {\n                            tasksForTodolist = tasksForTodolist.filter(flt => flt.isDone)\n                        }\n\n                        return <Grid item key={tl.id}>\n                            <Paper style={{padding: '25px 45px'}}\n                                   elevation={5}>\n                                <TodoList\n                                    id={tl.id}\n                                    title={tl.title}\n                                    filter={tl.filter}\n                                    tasks={tasksForTodolist}\n                                    removeTask={removeTask}\n                                    changeFilter={changeFilter}\n                                    addTask={addTask}\n                                    changeTaskTitle={changeTaskTitle}\n                                    changeTaskStatus={changeTaskStatus}\n                                    removeTodolist={removeTodolist}\n                                    changeTodoTitle={changeTodoTitle}\n                                />\n                            </Paper>\n                        </Grid>\n                    })\n                    }\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}