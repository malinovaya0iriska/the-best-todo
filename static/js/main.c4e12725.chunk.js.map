{"version":3,"sources":["Button.tsx","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","className","style","onClick","onClickHandler","title","AddItemForm","addItem","useState","setTitle","error","setError","onAddTaskClickHandler","trim","onChange","e","currentTarget","value","onKeyPress","key","EditableSpan","editMode","setEditMode","type","autoFocus","onBlur","onDoubleClick","TodoList","removeTodolist","id","newTitle","changeTodoTitle","addTask","tasks","map","task","isDone","removeTask","changeTaskStatus","checked","changeTaskTitle","filter","changeFilter","App","todolist_1_Id","v1","todolist_2_Id","todolists","setTodolists","setTasks","todolistId","tl","newTasks","t","newTodoId","tasksForTodolist","flt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4e12725.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    onClickHandler: () => void\r\n    style?: boolean\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n    const callback = () => props.onClickHandler()\r\n    return (\r\n        <button className={props.style ? 'active-filter' : ''} onClick={callback}>{props.title}</button>\r\n    );\r\n};\r\n\r\n","import React, {useState} from \"react\";\r\n\r\ntype PropsType = {\r\n    addItem: (title: string) => void\r\n}\r\nexport const AddItemForm: React.FC<PropsType> = ({addItem}) => {\r\n    const [title, setTitle] = useState<string>('')\r\n\r\n\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onTitleChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onAddTaskClickHandler = () => {\r\n        if (title.trim()) {\r\n            addItem(title.trim())\r\n            setTitle('')\r\n        } else setError('Heading is required!')\r\n    }\r\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.key === 'Enter') {\r\n            onAddTaskClickHandler()\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <input className={error ? 'error' : ''}\r\n                   onChange={onTitleChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   value={title}\r\n            />\r\n            <button onClick={onAddTaskClickHandler}>+</button>\r\n\r\n            {error && <div className={'error'}>{error}</div>}\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {useState} from \"react\";\r\n\r\ntype PropsType = {\r\n    value: string\r\n    onChange: (value: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<PropsType> = ({value, onChange}) => {\r\n    const [title, setTitle] = useState<string>(value)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const onDoubleClickHandler = () => {\r\n        setEditMode(true)\r\n    }\r\n    const setViewMode = () => {\r\n        setEditMode(false)\r\n        onChange(title)\r\n    }\r\n    const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n\r\n        editMode\r\n            ? <input type={'text'} autoFocus value={title} onChange={onChangeHandler} onBlur={setViewMode}/>\r\n            : <span onDoubleClick={onDoubleClickHandler}>{value}</span>\r\n    )\r\n        ;\r\n};\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\nimport {FilterType, TaskType} from \"./App\";\r\nimport {Button} from \"./Button\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeFilter: (filter: FilterType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodoTitle: (newTitle: string, id: string) => void\r\n    changeTaskTitle: (newTitle: string, id: string, todolistId: string) => void\r\n}\r\n\r\nexport function TodoList(props: TodoListPropsType) {\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter('all', props.id)\r\n    const onActiveClickHandler = () => props.changeFilter('active', props.id)\r\n    const onCompleteClickHandler = () => props.changeFilter('completed', props.id)\r\n\r\n    const onRemoveTodoHandler = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodoTitleHandler = (newTitle: string) => props.changeTodoTitle(newTitle, props.id)\r\n\r\n    return <div>\r\n        <h3>\r\n            <button onClick={onRemoveTodoHandler}>X</button>\r\n            <EditableSpan value={props.title} onChange={changeTodoTitleHandler}/></h3>\r\n\r\n        <AddItemForm addItem={addTask}/>\r\n\r\n        <ul>\r\n            {props.tasks\r\n                .map(task => {\r\n                        const changeTaskTitleHandler = (newTitle: string) => props.changeTaskTitle(newTitle, task.id, props.id)\r\n                        const onChangeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(task.id, e.currentTarget.checked, props.id)\r\n                        const onClickHandler = () => props.removeTask(task.id, props.id)\r\n                        return <li key={task.id} className={task.isDone ? 'is-done' : ''}>\r\n                            <Button title={'x'} onClickHandler={onClickHandler}/>\r\n                            <input type={'checkbox'} onChange={onChangeTaskStatus} checked={task.isDone}/>\r\n                            <EditableSpan value={task.title} onChange={changeTaskTitleHandler}/>\r\n                        </li>\r\n                    }\r\n                )}\r\n        </ul>\r\n        <div>\r\n            <Button style={props.filter === 'all'} title={'All'} onClickHandler={onAllClickHandler}/>\r\n            <Button style={props.filter === 'active'} title={'Active'} onClickHandler={onActiveClickHandler}/>\r\n            <Button style={props.filter === 'completed'} title={'Completed'} onClickHandler={onCompleteClickHandler}/>\r\n        </div>\r\n    </div>\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {TodoList} from \"./TodoList\";\nimport {v1} from \"uuid\";\nimport {AddItemForm} from \"./AddItemForm\";\n\nexport type TasksType = {\n    [key: string]: TaskType []\n}\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\nexport type TodoType = {\n    id: string\n    title: string\n    filter: FilterType\n}\nexport type FilterType = 'all' | 'active' | 'completed'\n\nexport function App() {\n\n    const todolist_1_Id = v1()\n    const todolist_2_Id = v1()\n    const [todolists, setTodolists] = useState<Array<TodoType>>([\n        {id: todolist_1_Id, title: 'What to learn', filter: 'all'},\n        {id: todolist_2_Id, title: 'My hobbies', filter: 'all'},\n    ])\n\n    const [tasks, setTasks] = useState<TasksType>({\n        [todolist_1_Id]: [\n            {id: v1(), title: 'HTML&CSS', isDone: true},\n            {id: v1(), title: 'Vanilla JS', isDone: true},\n            {id: v1(), title: 'React', isDone: false},\n            {id: v1(), title: 'Git/Github', isDone: false},\n            {id: v1(), title: 'NodeJS', isDone: false},\n            {id: v1(), title: 'REST API', isDone: false},\n        ],\n        [todolist_2_Id]: [\n            {id: v1(), title: 'Hiking', isDone: true},\n            {id: v1(), title: 'Reading', isDone: true},\n            {id: v1(), title: 'Coding', isDone: false},\n            {id: v1(), title: 'Cooking', isDone: false},\n            {id: v1(), title: 'Running', isDone: false},\n            {id: v1(), title: 'Travelling', isDone: false},\n        ],\n    })\n\n    const changeFilter = (filter: FilterType, todolistId: string) => {\n        setTodolists(todolists.map(tl => tl.id === todolistId ? {...tl, filter} : tl))\n    }\n    const removeTodolist = (todolistId: string) => {\n        setTodolists(todolists.filter(tl => tl.id !== todolistId))\n    }\n    const addTodolist = (title: string) => {\n        let newTodoId = v1()\n        setTodolists([{id: newTodoId, title, filter: 'all'}, ...todolists])\n        setTasks({...tasks, [newTodoId]: []})\n    }\n    const changeTodoTitle = (title: string, id: string) => {\n        setTodolists(todolists.map(tl => tl.id === id ? {...tl, title} : tl))\n    }\n    const removeTask = (id: string, todolistId: string) => {\n        let newTasks = tasks[todolistId].filter(t => t.id !== id)\n        setTasks({...tasks, [todolistId]: newTasks})\n    }\n    const changeTaskStatus = (id: string, isDone: boolean, todolistId: string) => {\n        let newTasks = tasks[todolistId].map(t => t.id === id ? {...t, isDone} : t)\n        setTasks({...tasks, [todolistId]: newTasks})\n    }\n\n    const addTask = (title: string, todolistId: string) => {\n        setTasks({...tasks, [todolistId]: [{id: v1(), title: title.trim(), isDone: false}, ...tasks[todolistId]]})\n    }\n\n    const changeTaskTitle = (title: string, id: string, todolistId: string) => {\n        let newTasks = tasks[todolistId].map(t => t.id === id ? {...t, title} : t)\n        setTasks({...tasks, [todolistId]: newTasks})\n\n    }\n    return (\n        <div className=\"App\">\n            <AddItemForm addItem={addTodolist}/>\n            {todolists.map(tl => {\n                let tasksForTodolist = tasks[tl.id]\n\n                if (tl.filter === 'active') {\n                    tasksForTodolist = tasksForTodolist.filter(flt => !flt.isDone)\n                }\n\n                if (tl.filter === 'completed') {\n                    tasksForTodolist = tasksForTodolist.filter(flt => flt.isDone)\n                }\n\n                return <TodoList key={tl.id}\n                                 id={tl.id}\n                                 title={tl.title}\n                                 filter={tl.filter}\n                                 tasks={tasksForTodolist}\n                                 removeTask={removeTask}\n                                 changeFilter={changeFilter}\n                                 addTask={addTask}\n                                 changeTaskTitle={changeTaskTitle}\n                                 changeTaskStatus={changeTaskStatus}\n                                 removeTodolist={removeTodolist}\n                                 changeTodoTitle={changeTodoTitle}\n                />\n            })\n            }\n        </div>\n    );\n}\n\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}