{"version":3,"sources":["reportWebVitals.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","TodoList.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","App.tsx","state/store.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddItemForm","React","memo","addItem","console","log","useState","title","setTitle","error","setError","onAddTaskClickHandler","trim","TextField","variant","className","onChange","e","currentTarget","value","onKeyPress","key","label","helperText","IconButton","color","size","onClick","AddBox","EditableSpan","editMode","setEditMode","type","autoFocus","onBlur","onDoubleClick","Task","props","changeTaskTitleHandler","useCallback","newTitle","changeTaskTitle","task","id","todolistId","isDone","Checkbox","checked","changeTaskStatus","removeTask","TodoList","tasksForTodolist","tasks","filter","flt","addTask","onAllClickHandler","changeFilter","onActiveClickHandler","onCompleteClickHandler","changeTodoTitleHandler","changeTodoTitle","removeTodolist","map","Button","initialState","App","todolists","useSelector","state","dispatch","useDispatch","changeTodoFilterAC","addTodolist","v1","addTodoAC","changeTodoTitleAC","removeTaskAC","changeTaskStatusAC","addTaskAC","changeTaskTitleAC","AppBar","position","Toolbar","style","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","item","Paper","elevation","rootReducer","combineReducers","action","newTasks","filteredTasks","t","addedTasks","changingTasks","checkedTasks","renamingTasks","changedTasks","stateCopy","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e00bae85.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {useState} from \"react\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport TextField from \"@mui/material/TextField/TextField\";\r\nimport {AddBox} from \"@mui/icons-material/\";\r\n\r\ntype PropsType = {\r\n    addItem: (title: string) => void\r\n}\r\nexport const AddItemForm: React.FC<PropsType> =React.memo(({addItem}) => {\r\n    console.log('AddItemForm rendering')\r\n    const [title, setTitle] = useState<string>('')\r\n\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onTitleChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onAddTaskClickHandler = () => {\r\n        if (title.trim()) {\r\n            addItem(title.trim())\r\n            setTitle('')\r\n        } else setError('Heading is required!')\r\n    }\r\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        error && setError(null)\r\n        if (e.key === 'Enter') {\r\n            onAddTaskClickHandler()\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField error={!!error}\r\n                       variant={'outlined'}\r\n                       className={error ? 'error' : ''}\r\n                       onChange={onTitleChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       value={title}\r\n                       label={'enter you heading...'}\r\n                       helperText={error}\r\n            />\r\n            <IconButton color={'primary'} size={'large'} onClick={onAddTaskClickHandler}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n})\r\n\r\n","import React, {useState} from \"react\";\r\nimport TextField from \"@mui/material/TextField/TextField\";\r\n\r\ntype PropsType = {\r\n    value: string\r\n    onChange: (value: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<PropsType> = React.memo(({value, onChange}) => {\r\n    const [title, setTitle] = useState<string>(value)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const onDoubleClickHandler = () => {\r\n        setEditMode(true)\r\n    }\r\n    const setViewMode = () => {\r\n        setEditMode(false)\r\n        onChange(title)\r\n    }\r\n    const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n\r\n        editMode\r\n            ? <TextField variant={'outlined'} type={'text'} autoFocus value={title} onChange={onChangeHandler} onBlur={setViewMode}/>\r\n            : <span onDoubleClick={onDoubleClickHandler}>{value}</span>\r\n    )\r\n\r\n}\r\n)\r\n\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport Checkbox from \"@mui/material/Checkbox/Checkbox\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Delete from \"@mui/icons-material/Delete\";\r\nimport {TaskType} from \"./App\";\r\n\r\ntype PropsTypes = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (newTitle: string, id: string, todolistId: string) => void\r\n    removeTask: (id: string, todolistId: string) => void\r\n}\r\n\r\nexport const Task: React.FC<PropsTypes> = React.memo((props) => {\r\n    const changeTaskTitleHandler = useCallback((newTitle: string) => props.changeTaskTitle(newTitle, props.task.id, props.todolistId), [props.changeTaskTitle, props.task.id, props.todolistId])\r\n    const onChangeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(props.task.id, e.currentTarget.checked, props.todolistId)\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n    return (\r\n        <li className={props.task.isDone ? 'is-done' : ''}>\r\n            <Checkbox\r\n                checked={props.task.isDone}\r\n                color={\"secondary\"}\r\n                onChange={onChangeTaskStatus}\r\n            />\r\n            <EditableSpan value={props.task.title} onChange={changeTaskTitleHandler}/>\r\n            <IconButton onClick={onClickHandler}><Delete/></IconButton>\r\n        </li>\r\n    )\r\n})\r\n\r\n","import React, {useCallback} from \"react\";\r\nimport {FilterType, TaskType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport Delete from \"@mui/icons-material/Delete\";\r\nimport Button from \"@mui/material/Button/Button\";\r\nimport {Task} from \"./Task\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeFilter: (filter: FilterType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodoTitle: (newTitle: string, id: string) => void\r\n    changeTaskTitle: (newTitle: string, id: string, todolistId: string) => void\r\n}\r\n\r\nexport const TodoList = React.memo(function (props: TodoListPropsType) {\r\n        let tasksForTodolist = props.tasks\r\n        if (props.filter === 'active') {\r\n            tasksForTodolist = tasksForTodolist.filter(flt => !flt.isDone)\r\n        }\r\n\r\n        if (props.filter === 'completed') {\r\n            tasksForTodolist = tasksForTodolist.filter(flt => flt.isDone)\r\n        }\r\n        const addTask = useCallback((title: string) => {\r\n            props.addTask(title, props.id)\r\n\r\n        }, [props.addTask, props.id])\r\n\r\n        const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.changeFilter, props.id])\r\n        const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.changeFilter, props.id])\r\n        const onCompleteClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.changeFilter, props.id])\r\n\r\n        const onRemoveTodoHandler = () => {\r\n            props.removeTodolist(props.id)\r\n        }\r\n        const changeTodoTitleHandler = useCallback((newTitle: string) => props.changeTodoTitle(newTitle, props.id), [props.changeTodoTitle, props.id])\r\n\r\n        return <div>\r\n            <h3>\r\n                <EditableSpan value={props.title} onChange={changeTodoTitleHandler}/>\r\n                <IconButton onClick={onRemoveTodoHandler}><Delete/></IconButton>\r\n            </h3>\r\n\r\n            <AddItemForm addItem={addTask}/>\r\n\r\n            <ul>\r\n                {tasksForTodolist\r\n                    .map(task => <Task key={task.id}\r\n                                       task={task}\r\n                                       todolistId={props.id}\r\n                                       removeTask={props.removeTask}\r\n                                       changeTaskStatus={props.changeTaskStatus}\r\n                                       changeTaskTitle={props.changeTaskTitle}\r\n                        />\r\n                    )}\r\n            </ul>\r\n            <div>\r\n                <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                        onClick={onAllClickHandler}\r\n                        color={'inherit'}>All\r\n                </Button>\r\n                <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                        onClick={onActiveClickHandler}\r\n                        color={'primary'}>Active\r\n                </Button>\r\n                <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                        onClick={onCompleteClickHandler}\r\n                        color={'secondary'}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    }\r\n)","import {FilterType, TodoType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type ActionTodosType = ReturnType<typeof removeTodoAC>\r\n    | ReturnType<typeof addTodoAC>\r\n    | ReturnType<typeof changeTodoTitleAC>\r\n    | ReturnType<typeof changeTodoFilterAC>\r\n\r\nconst initialState: TodoType[] = []\r\n\r\nexport const todolistsReducer = (state = initialState, action: ActionTodosType): TodoType[] => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{id: action.todolistId, title: action.title, filter: 'all'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const removeTodoAC = (id: string) => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        id\r\n    } as const\r\n}\r\nexport const addTodoAC = (title: string) => {\r\n    return {\r\n        type: 'ADD-TODOLIST',\r\n        title,\r\n        todolistId: v1()\r\n    } as const\r\n}\r\nexport const changeTodoTitleAC = (id: string, title: string) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        id,\r\n        title\r\n    } as const\r\n}\r\nexport const changeTodoFilterAC = (id: string, filter: FilterType) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        id,\r\n        filter\r\n    } as const\r\n}","import {TasksType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {addTodoAC, removeTodoAC} from \"./todolists-reducer\";\r\n\r\ntype ActionTasksType = ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | ReturnType<typeof addTodoAC>\r\n    | ReturnType<typeof removeTodoAC>\r\n\r\nconst initialState: TasksType = {}\r\nexport const tasksReducer = (state = initialState, action: ActionTasksType): TasksType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            let newTasks = state[action.todolistId]\r\n            let filteredTasks = newTasks.filter(t => t.id !== action.id)\r\n            return {...state, [action.todolistId]: filteredTasks};\r\n        case 'ADD-TASK':\r\n            let tasks = state[action.todolistId]\r\n            let addedTasks = [{id: v1(), title: action.title, isDone: false}, ...tasks]\r\n            return {...state, [action.todolistId]: addedTasks};\r\n        case 'CHANGE-TASK-STATUS':\r\n            let changingTasks = state[action.todolistId]\r\n            let checkedTasks = changingTasks.map(tl => tl.id === action.id ? {...tl, isDone: action.isDone} : tl)\r\n            return {...state, [action.todolistId]: checkedTasks};\r\n        case 'CHANGE-TASK-TITLE':\r\n            let renamingTasks = state[action.todolistId]\r\n            let changedTasks = renamingTasks.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n            return {...state, [action.todolistId]: changedTasks}\r\n        case 'ADD-TODOLIST':\r\n            return {[action.todolistId]: [], ...state};\r\n        case 'REMOVE-TODOLIST':\r\n            let stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy;\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const removeTaskAC = (id: string, todolistId: string) => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        id,\r\n        todolistId\r\n    } as const\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string) => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        title,\r\n        todolistId\r\n    } as const\r\n}\r\nexport const changeTaskStatusAC = (id: string, isDone: boolean, todolistId: string) => {\r\n    return {\r\n        type: 'CHANGE-TASK-STATUS',\r\n        id,\r\n        isDone,\r\n        todolistId\r\n    } as const\r\n}\r\nexport const changeTaskTitleAC = (id: string, title: string, todolistId: string) => {\r\n    return {\r\n        type: 'CHANGE-TASK-TITLE',\r\n        id,\r\n        title,\r\n        todolistId\r\n    } as const\r\n}","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./TodoList\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport Toolbar from \"@mui/material/Toolbar/Toolbar\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport AppBar from \"@mui/material/AppBar/AppBar\";\r\nimport {Menu} from \"@mui/icons-material\";\r\nimport Typography from \"@mui/material/Typography/Typography\";\r\nimport Button from \"@mui/material/Button/Button\";\r\nimport Container from \"@mui/material/Container/Container\";\r\nimport Grid from \"@mui/material/Grid/Grid\";\r\nimport Paper from \"@mui/material/Paper/Paper\";\r\nimport {addTodoAC, changeTodoFilterAC, changeTodoTitleAC, removeTodoAC} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\nexport type TasksType = {\r\n    [key: string]: TaskType []\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TodoType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\n\r\nexport function App() {\r\n    const todolists = useSelector<AppRootStateType, Array<TodoType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const changeFilter = useCallback((filter: FilterType, todolistId: string) => {\r\n        dispatch(changeTodoFilterAC(todolistId, filter))\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodoAC(todolistId))\r\n    }, [dispatch])\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodoAC(title))\r\n    }, [dispatch])\r\n    const changeTodoTitle = useCallback((title: string, id: string) => {\r\n        dispatch(changeTodoTitleAC(id, title))\r\n    }, [dispatch])\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskAC(id, todolistId))\r\n    }, [dispatch])\r\n    const changeTaskStatus = useCallback((id: string, isDone: boolean, todolistId: string) => {\r\n        dispatch(changeTaskStatusAC(id, isDone, todolistId))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskAC(title, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((title: string, id: string, todolistId: string) => {\r\n        dispatch(changeTaskTitleAC(id, title, todolistId))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton edge={'start'} color={'inherit'} aria-label={'menu'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        News\r\n                    </Typography>\r\n                    <Button variant={'outlined'} color={'inherit'}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '30px 0'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={10}>\r\n                    {todolists.map(tl => {\r\n                        return <Grid item key={tl.id}>\r\n                            <Paper style={{padding: '25px 45px'}}\r\n                                   elevation={5}>\r\n                                <TodoList\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    filter={tl.filter}\r\n                                    tasks={tasks[tl.id]}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTaskStatus={changeTaskStatus}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTodoTitle={changeTodoTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\n// @ts-ignore\r\nexport const store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {App} from \"./App\";\nimport {store} from \"./state/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App/>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}