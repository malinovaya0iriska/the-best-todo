{"version":3,"sources":["api/tasks-api.ts","reportWebVitals.ts","api/todolist-api.ts","api/auth-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/TodoList.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","put","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","onAddTaskClickHandler","trim","TextField","variant","className","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","size","onClick","AddBox","taskAPI","taskId","model","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","updateTaskTC","getState","task","tasks","find","t","id","apiModel","deadline","description","priority","startDate","res","resultCode","updateTaskAC","catch","console","warn","Task","props","useDispatch","changeTaskTitle","useCallback","removeTask","entityStatus","changeTaskEntityStatusAC","removeTaskAC","Completed","Checkbox","checked","New","TodoList","useSelector","state","useEffect","setTasksAC","items","tasksForTodolist","filter","flt","addTask","item","addTaskTC","onAllClickHandler","changeFilter","onActiveClickHandler","onCompleteClickHandler","changeTodoTitleHandler","newTitle","changeTodoTitle","removeTodolist","map","Button","TodolistsList","demo","todolists","auth","todos","changeTodoFilterAC","removeTodoTC","addTodolist","todolist","addTodoTC","changeTodoTitleAC","changeTodoTitleTC","Grid","container","style","padding","spacing","tl","Paper","elevation","to","Alert","forwardRef","ref","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","FormControlLabel","control","App","logOutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","action","copyState","forEach","todoListId","stateCopy","todo","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4206c891.chunk.js","sourcesContent":["import {instance, ResponseType} from \"./todolist-api\";\r\n\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type TaskType = {\r\n    addedDate: string\r\n    deadline: string | null\r\n    description: null | string\r\n    id: string\r\n    order: number\r\n    priority: TaskPriorities\r\n    startDate: null | string\r\n    status: TaskStatuses\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport type ModelType = {\r\n    title: string\r\n    description: string | null\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport const taskAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    addTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: ModelType) {\r\n        return instance.put<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\nimport axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '9f225800-9b44-4745-b381-d436ad2be4a7'\r\n    }\r\n})\r\n\r\n//api\r\n// в результате запроса на сервер API возвращается промисс\r\nexport const todolistAPI = {\r\n    getTodos() {\r\n        return instance.get<TodoType[]>('todo-lists')\r\n    },\r\n    addTodo(title: string) {\r\n        return instance.post<ResponseType<{ item: TodoType }>>('todo-lists', {title})\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolistTitle(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\n//types\r\nexport type ResponseType<T = {}> = {\r\n    resultCode: number\r\n    fieldsErrors: Array<string>\r\n    messages: Array<string>\r\n    data: T\r\n}\r\nexport type TodoType = {\r\n    id: string,\r\n    title: string,\r\n    addedDate: string,\r\n    order: number\r\n}","import {instance, ResponseType} from \"./todolist-api\";\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport const authAPI = {\r\n    logIn(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>(`auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{id: number,email: string,login: string}>>(`auth/me`, )\r\n    },\r\n    logOut(){\r\n        return instance.delete<ResponseType<{ userId?: number }>>(`auth/login`)\r\n    }\r\n}","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {ResponseType} from '../api/todolist-api';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>\r\n\r\n","import {authAPI, LoginParamsType} from \"../../api/auth-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsAuthType): InitialStateType => {\r\n    switch (action.type) {\r\n         case 'AUTH/SET-IS-LOGGED-IN':\r\n             return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'AUTH/SET-IS-LOGGED-IN', value})\r\n\r\n//thunks\r\nexport const logInTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logIn(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logOutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logOut()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n//types\r\ntype ActionsAuthType = ReturnType<typeof setIsLoggedInAC>","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null,\r\n    isInitialized: false,\r\n}\r\n\r\ntype InitialStateType = {\r\n    status: RequestStatusType\r\n    error: null | string\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionAppType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: null | string) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppInitializedAC = (value: boolean) => ({type: 'APP/SET-IS-INITIALIZED', value} as const)\r\n\r\n//thunks\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n        }else{\r\n            dispatch(setIsLoggedInAC(false))\r\n        }\r\n        dispatch(setAppInitializedAC(true))\r\n    })\r\n}\r\n//types\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type setAppInitializedActionType = ReturnType<typeof setAppInitializedAC>\r\nexport type ActionAppType = SetAppStatusActionType | SetAppErrorActionType | setAppInitializedActionType\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {todolistAPI, TodoType} from \"../../api/todolist-api\";\r\nimport {ActionAppType, RequestStatusType, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: TodolistDomainType[] = []\r\n\r\nexport const todolistsReducer = (state = initialState, action: ActionTodosType): TodolistDomainType[] => {\r\n    switch (action.type) {\r\n        case 'SET-TODOS':\r\n            return action.todos.map(todo => ({...todo, filter: 'all', entityStatus: 'succeeded'}))\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'succeeded'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//actions\r\nexport const setTodosAC = (todos: TodoType[]) => ({type: 'SET-TODOS', todos} as const)\r\nexport const removeTodoAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodoAC = (todolist: TodoType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodoTitleAC = (id: string, title: string) => ({type: 'CHANGE-TODOLIST-TITLE', id, title} as const)\r\nexport const changeTodoFilterAC = (id: string, filter: FilterType) =>\r\n    ({type: 'CHANGE-TODOLIST-FILTER', id, filter} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) =>\r\n    ({type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, entityStatus} as const)\r\n\r\n//thunk\r\nexport const fetchTodosTC = () => (dispatch: Dispatch<ActionTodosType | ActionAppType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTodos()\r\n        .then(res => {\r\n            dispatch(setTodosAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n}\r\nexport const addTodoTC = (title: string) => (dispatch: Dispatch<ActionTodosType | ActionAppType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.addTodo(title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodoAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const removeTodoTC = (todolistId: string) => (dispatch: Dispatch<ActionTodosType | ActionAppType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    todolistAPI.deleteTodo(todolistId)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTodoAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const changeTodoTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionTodosType | ActionAppType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.updateTodolistTitle(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodoTitleAC(todolistId, title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n//types\r\nexport type ActionTodosType = ReturnType<typeof removeTodoAC>\r\n    | ReturnType<typeof addTodoAC>\r\n    | ReturnType<typeof changeTodoTitleAC>\r\n    | ReturnType<typeof changeTodoFilterAC>\r\n    | ReturnType<typeof setTodosAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type TodolistDomainType = TodoType & {\r\n    filter: FilterType,\r\n    entityStatus: RequestStatusType,\r\n}\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\n","import React, {useState} from \"react\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport TextField from \"@mui/material/TextField/TextField\";\r\nimport {AddBox} from \"@mui/icons-material/\";\r\n\r\ntype PropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\nexport const AddItemForm: React.FC<PropsType> = React.memo(({addItem, disabled}) => {\r\n\r\n    const [title, setTitle] = useState<string>('')\r\n\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onTitleChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onAddTaskClickHandler = () => {\r\n        if (title.trim()) {\r\n            addItem(title.trim())\r\n            setTitle('')\r\n        } else setError('Heading is required!')\r\n    }\r\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        error && setError(null)\r\n        if (e.key === 'Enter') {\r\n            onAddTaskClickHandler()\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField error={!!error}\r\n                       variant={'outlined'}\r\n                       className={error ? 'error' : ''}\r\n                       onChange={onTitleChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       value={title}\r\n                       label={'enter you heading...'}\r\n                       helperText={error}\r\n            />\r\n            <IconButton color={'primary'} size={'large'} onClick={onAddTaskClickHandler} disabled={disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n})\r\n\r\n","import React, {useState} from \"react\";\r\nimport TextField from \"@mui/material/TextField/TextField\";\r\n\r\ntype PropsType = {\r\n    value: string\r\n    onChange: (value: string) => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const EditableSpan: React.FC<PropsType> = React.memo(({value, onChange, disabled}) => {\r\n        const [title, setTitle] = useState<string>(value)\r\n        const [editMode, setEditMode] = useState<boolean>(false)\r\n        const onDoubleClickHandler = () => {\r\n            !disabled && setEditMode(true)\r\n        }\r\n        const setViewMode = () => {\r\n            setEditMode(false)\r\n            onChange(title)\r\n        }\r\n        const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setTitle(e.currentTarget.value)\r\n        }\r\n        return (\r\n\r\n            editMode\r\n                ? <TextField variant={'outlined'} type={'text'} autoFocus value={title} onChange={onChangeHandler}\r\n                             onBlur={setViewMode}/>\r\n                : <span onDoubleClick={onDoubleClickHandler}>{value}</span>\r\n        )\r\n\r\n    }\r\n)\r\n\r\n","import {addTodoAC, removeTodoAC, setTodosAC} from \"./todolists-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ModelType, taskAPI, TaskPriorities, TaskStatuses, TaskType} from \"../../api/tasks-api\";\r\nimport {TasksType} from \"../../app/App\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {TodoType} from \"../../api/todolist-api\";\r\nimport {ActionAppType, RequestStatusType, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: TasksType = {}\r\nexport const tasksReducer = (state = initialState, action: ActionTasksType): TasksType => {\r\n    switch (action.type) {\r\n        case 'SET-TODOS':\r\n            const copyState = {...state}\r\n            action.todos.forEach((tl: TodoType) => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState;\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks.map(task => ({...task, entityStatus: 'succeeded'}))}\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.id)};\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [{\r\n                    ...action.task,\r\n                    entityStatus: 'succeeded'\r\n                }, ...state[action.task.todoListId]]\r\n            };\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {[action.todolist.id]: [], ...state};\r\n        case 'REMOVE-TODOLIST':\r\n            let stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy;\r\n        case 'CHANGE-TASK-ENTITY-STATUS':\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.id ? {...t, entityStatus: action.entityStatus} : t)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//actions\r\nexport const setTasksAC = (tasks: TaskType[], todolistId: string) => ({type: 'SET-TASKS', tasks, todolistId} as const)\r\nexport const removeTaskAC = (id: string, todolistId: string) => ({type: 'REMOVE-TASK', id, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const changeTaskEntityStatusAC = (id: string, entityStatus: RequestStatusType, todolistId: string) =>\r\n    ({type: 'CHANGE-TASK-ENTITY-STATUS', id, entityStatus, todolistId} as const)\r\n\r\n//thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionTasksType | ActionAppType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    taskAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(setTasksAC(res.data.items, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTasksTC = (id: string, todolistId: string) => (dispatch: Dispatch<ActionTasksType | ActionAppType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTaskEntityStatusAC(id, 'loading', todolistId))\r\n    taskAPI.deleteTask(todolistId, id)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTaskAC(id, todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionTasksType | ActionAppType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    taskAPI.addTask(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, todolistId: string, model: UpdateDomainTaskModelType) =>\r\n    (dispatch: Dispatch<ActionTasksType | ActionAppType>, getState: () => AppRootStateType) => {\r\n\r\n        dispatch(setAppStatusAC('loading'))\r\n// так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком  // чтобы у неё отобрать остальные св-ва\r\n\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => {\r\n            return t.id === taskId\r\n        })\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: ModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task?.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...model\r\n        }\r\n        if (task) {\r\n            taskAPI.updateTask(todolistId, taskId, apiModel)\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(updateTaskAC(taskId, model, todolistId))\r\n                        dispatch(setAppStatusAC('succeeded'))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    handleServerNetworkError(error, dispatch)\r\n                })\r\n        }\r\n    }\r\n\r\n//types\r\ntype ActionTasksType = ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof addTodoAC>\r\n    | ReturnType<typeof removeTodoAC>\r\n    | ReturnType<typeof setTodosAC>\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof changeTaskEntityStatusAC>\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}","import React, {ChangeEvent, useCallback} from 'react';\r\nimport Checkbox from \"@mui/material/Checkbox/Checkbox\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Delete from \"@mui/icons-material/Delete\";\r\nimport {TaskStatuses} from \"../../../../api/tasks-api\";\r\nimport {removeTasksTC, updateTaskTC} from \"../../tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {TasksDomainType} from \"../../../../app/App\";\r\n\r\n\r\ntype PropsTypes = {\r\n    task: TasksDomainType\r\n    todolistId: string\r\n}\r\n\r\nexport const Task: React.FC<PropsTypes> = React.memo((props) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        dispatch(updateTaskTC(props.task.id, props.todolistId, {status}))\r\n    }\r\n\r\n    const changeTaskTitle = useCallback((title: string) => {\r\n        dispatch(updateTaskTC(props.task.id, props.todolistId, {title},))\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback(() => {\r\n        dispatch(removeTasksTC(props.task.id, props.todolistId))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <li className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n            <Checkbox\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n                color={\"secondary\"}\r\n                onChange={onChangeTaskStatus}\r\n            />\r\n            <EditableSpan value={props.task.title} disabled={props.task.entityStatus === 'loading'}\r\n                          onChange={changeTaskTitle}/>\r\n            <IconButton onClick={removeTask}><Delete/></IconButton>\r\n        </li>\r\n    )\r\n})\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {TaskStatuses} from \"../../../api/tasks-api\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport Delete from \"@mui/icons-material/Delete\";\r\nimport Button from \"@mui/material/Button/Button\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {FilterType} from \"../todolists-reducer\";\r\nimport {addTaskTC, fetchTasksTC} from \"../tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport {TasksDomainType} from \"../../../app/App\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n    entityStatus: RequestStatusType\r\n    changeFilter: (filter: FilterType, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodoTitle: (newTitle: string, id: string) => void\r\n}\r\n\r\nexport const TodoList = React.memo(function (props: TodoListPropsType) {\r\n        const tasks = useSelector<AppRootStateType, TasksDomainType[]>(state => state.tasks[props.id])\r\n        const dispatch = useDispatch()\r\n\r\n        useEffect(() => {\r\n            dispatch(fetchTasksTC(props.id))\r\n        }, [])\r\n\r\n        let tasksForTodolist = tasks\r\n        if (props.filter === 'active') {\r\n            tasksForTodolist = tasksForTodolist.filter(flt => flt.status === TaskStatuses.New)\r\n        }\r\n\r\n        if (props.filter === 'completed') {\r\n            tasksForTodolist = tasksForTodolist.filter(flt => flt.status === TaskStatuses.Completed)\r\n        }\r\n        const addTask = useCallback((title: string) => {\r\n            dispatch(addTaskTC(title, props.id))\r\n        }, [props.id])\r\n\r\n        const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.changeFilter, props.id])\r\n        const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.changeFilter, props.id])\r\n        const onCompleteClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.changeFilter, props.id])\r\n\r\n        const onRemoveTodoHandler = () => {\r\n            props.removeTodolist(props.id)\r\n        }\r\n        const changeTodoTitleHandler = useCallback((newTitle: string) => props.changeTodoTitle(newTitle, props.id), [props.changeTodoTitle, props.id])\r\n\r\n        return <div>\r\n            <h3>\r\n                <EditableSpan value={props.title} disabled={props.entityStatus === 'loading'}\r\n                              onChange={changeTodoTitleHandler}/>\r\n                <IconButton onClick={onRemoveTodoHandler} disabled={props.entityStatus === 'loading'}><Delete/></IconButton>\r\n            </h3>\r\n\r\n            <AddItemForm addItem={addTask} disabled={props.entityStatus === 'loading'}/>\r\n\r\n            <ul>\r\n                {tasksForTodolist\r\n                    .map(task => <Task key={task.id}\r\n                                       task={task}\r\n                                       todolistId={props.id}\r\n                        />\r\n                    )}\r\n            </ul>\r\n            <div>\r\n                <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                        onClick={onAllClickHandler}\r\n                        color={'inherit'}>All\r\n                </Button>\r\n                <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                        onClick={onActiveClickHandler}\r\n                        color={'primary'}>Active\r\n                </Button>\r\n                <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                        onClick={onCompleteClickHandler}\r\n                        color={'secondary'}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    }\r\n)","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    addTodoTC,\r\n    changeTodoFilterAC,\r\n    changeTodoTitleTC,\r\n    fetchTodosTC,\r\n    FilterType,\r\n    removeTodoTC,\r\n    TodolistDomainType\r\n} from \"./todolists-reducer\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport Grid from \"@mui/material/Grid/Grid\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport Paper from \"@mui/material/Paper/Paper\";\r\nimport {TodoList} from \"./Todolist/TodoList\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\nexport const TodolistsList: React.FC<PropsType> = ({demo= false}) => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodosTC())\r\n    }, [])\r\n\r\n    const changeFilter = useCallback((filter: FilterType, todolistId: string) => {\r\n        dispatch(changeTodoFilterAC(todolistId, filter))\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodoTC(todolistId))\r\n    }, [dispatch])\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodoTC(title))\r\n    }, [dispatch])\r\n    const changeTodoTitle = useCallback((title: string, id: string) => {\r\n        dispatch(changeTodoTitleTC(id, title))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '30px 0'}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={10}>\r\n                {todolists.map(tl => {\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '25px 45px'}}\r\n                               elevation={5}>\r\n                            <TodoList\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                filter={tl.filter}\r\n                                entityStatus={tl.entityStatus}\r\n                                changeFilter={changeFilter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTodoTitle={changeTodoTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from \"@mui/material/Alert\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>((state) => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {logInTC} from \"./auth-reducer\";\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n            initialValues: {\r\n                email: '',\r\n                password: '',\r\n                rememberMe: false\r\n            },\r\n            onSubmit: values => {\r\n                dispatch(logInTC(values))\r\n                formik.resetForm()\r\n            },\r\n        }\r\n    )\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label={'Email'} margin={'normal'} {...formik.getFieldProps('email')}/>\r\n                        <TextField type={'password'} label={'Password'}\r\n                                   margin={'normal'} {...formik.getFieldProps('password')}\r\n                        />\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox {...formik.getFieldProps('rememberMe')}\r\n                                                             checked={formik.values.rememberMe}/>}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport Toolbar from \"@mui/material/Toolbar/Toolbar\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport AppBar from \"@mui/material/AppBar/AppBar\";\r\nimport {Menu} from \"@mui/icons-material\";\r\nimport Typography from \"@mui/material/Typography/Typography\";\r\nimport Button from \"@mui/material/Button/Button\";\r\nimport Container from \"@mui/material/Container/Container\";\r\nimport {TaskType} from \"../api/tasks-api\";\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport LinearProgress from '@mui/material/LinearProgress'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Login} from \"../features/Login/Login\";\r\nimport CircularProgress from \"@mui/material/CircularProgress/CircularProgress\";\r\nimport {logOutTC} from \"../features/Login/auth-reducer\";\r\n\r\n\r\nexport type TasksDomainType = TaskType & { entityStatus: RequestStatusType }\r\nexport type TasksType = {\r\n    [key: string]: Array<TasksDomainType>\r\n}\r\n\r\nexport function App({demo = false}) {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state: AppRootStateType) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state: AppRootStateType) => state.app.isInitialized)\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logOutHandler = useCallback(() => {\r\n        dispatch(logOutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}><CircularProgress/>\r\n        </div>\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton edge={'start'} color={'inherit'} aria-label={'menu'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn &&\r\n                    <Button variant={'outlined'} color={'inherit'} onClick={logOutHandler}>Log OUT</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color={'secondary'}/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import {composeWithDevTools} from 'redux-devtools-extension';\r\nimport {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n// непосредственно создаём store\r\n// @ts-ignore\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {App} from \"./app/App\";\nimport {store} from \"./app/store\";\nimport {Provider} from \"react-redux\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <HashRouter>\n          <App/>\n          </HashRouter>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}