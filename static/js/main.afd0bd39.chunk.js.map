{"version":3,"sources":["api/tasks-api.ts","reportWebVitals.ts","api/todolist-api.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/TodoList.tsx","features/TodolistsList/TodolistsList.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","put","initialState","taskAPI","taskId","model","updateTaskTC","dispatch","getState","task","tasks","find","t","id","apiModel","deadline","description","priority","startDate","status","type","updateTaskAC","console","warn","AddItemForm","React","memo","addItem","useState","setTitle","error","setError","onAddTaskClickHandler","trim","TextField","variant","className","onChange","e","currentTarget","value","onKeyPress","key","label","helperText","IconButton","color","size","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","props","changeTaskTitleHandler","useCallback","newTitle","changeTaskTitle","Completed","Checkbox","checked","changeTaskStatus","New","removeTask","TodoList","useDispatch","useEffect","res","setTasksAC","data","items","tasksForTodolist","filter","flt","addTask","onAllClickHandler","changeFilter","onActiveClickHandler","onCompleteClickHandler","changeTodoTitleHandler","changeTodoTitle","removeTodolist","map","Button","TodolistsList","todolists","useSelector","state","todos","changeTodoFilterAC","removeTodoTC","addTodolist","todolist","item","addTodoTC","changeTodoTitleAC","changeTodoTitleTC","removeTaskAC","removeTasksTC","addTaskTC","Grid","container","style","padding","spacing","tl","Paper","elevation","App","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","rootReducer","combineReducers","action","copyState","forEach","todoListId","stateCopy","todo","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.afd0bd39.chunk.js","sourcesContent":["import {instance, ResponseType} from \"./todolist-api\";\r\n\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type TaskType = {\r\n    addedDate: string\r\n    deadline: string | null\r\n    description: null | string\r\n    id: string\r\n    order: number\r\n    priority: TaskPriorities\r\n    startDate: null | string\r\n    status: TaskStatuses\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport type ModelType = {\r\n    title: string\r\n    description: string | null\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport const taskAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    addTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: ModelType) {\r\n        return instance.put<ResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\nimport axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '9f225800-9b44-4745-b381-d436ad2be4a7'\r\n    }\r\n})\r\n\r\n//api\r\n// в результате запроса на сервер API возвращается промисс\r\nexport const todolistAPI = {\r\n    getTodos() {\r\n        return instance.get<TodoType[]>('/todo-lists')\r\n    },\r\n    addTodo(title: string) {\r\n        return instance.post<ResponseType<{ item: TodoType }>>('/todo-lists', {title})\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolistTitle(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`/todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\n//types\r\nexport type ResponseType<T = {}> = {\r\n    resultCode: number\r\n    fieldsErrors: Array<string>\r\n    messages: Array<string>\r\n    data: T\r\n}\r\nexport type TodoType = {\r\n    id: string,\r\n    title: string,\r\n    addedDate: string,\r\n    order: number\r\n}","import {Dispatch} from \"redux\";\r\nimport {todolistAPI, TodoType} from \"../../api/todolist-api\";\r\n\r\nconst initialState: TodolistDomainType[] = []\r\n\r\nexport const todolistsReducer = (state = initialState, action: ActionTodosType): TodolistDomainType[] => {\r\n    switch (action.type) {\r\n        case 'SET-TODOS':\r\n            return action.todos.map(todo => ({...todo, filter: 'all'}))\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//actions\r\nexport const setTodosAC = (todos: TodoType[]) => ({type: 'SET-TODOS', todos} as const)\r\nexport const removeTodoAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodoAC = (todolist: TodoType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodoTitleAC = (id: string, title: string) => ({type: 'CHANGE-TODOLIST-TITLE', id, title} as const)\r\nexport const changeTodoFilterAC = (id: string, filter: FilterType) => ({type: 'CHANGE-TODOLIST-FILTER',id, filter} as const)\r\n\r\n//thunk\r\nexport const fetchTodosTC = () => (dispatch: Dispatch<ActionTodosType>) => {\r\n    todolistAPI.getTodos()\r\n        .then(res => {\r\n            dispatch(setTodosAC(res.data))\r\n        })\r\n}\r\nexport const addTodoTC = (title: string) => (dispatch: Dispatch<ActionTodosType>) => {\r\n    todolistAPI.addTodo(title)\r\n        .then(res => {\r\n            dispatch(addTodoAC(res.data.data.item))\r\n        })\r\n}\r\nexport const removeTodoTC = (todolistId: string) => (dispatch: Dispatch<ActionTodosType>) => {\r\n    todolistAPI.deleteTodo(todolistId)\r\n        .then(res => {\r\n            dispatch(removeTodoAC(todolistId))\r\n        })\r\n}\r\nexport const changeTodoTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionTodosType>) => {\r\n    todolistAPI.updateTodolistTitle(todolistId, title)\r\n        .then(res => {\r\n            dispatch(changeTodoTitleAC(todolistId,title))\r\n        })\r\n}\r\n\r\n//types\r\nexport type ActionTodosType = ReturnType<typeof removeTodoAC>\r\n    | ReturnType<typeof addTodoAC>\r\n    | ReturnType<typeof changeTodoTitleAC>\r\n    | ReturnType<typeof changeTodoFilterAC>\r\n    | ReturnType<typeof setTodosAC>\r\n\r\nexport type TodolistDomainType = TodoType & {\r\n    filter: FilterType\r\n}\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\n","import {addTodoAC, removeTodoAC, setTodosAC} from \"./todolists-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ModelType, taskAPI, TaskPriorities, TaskStatuses, TaskType} from \"../../api/tasks-api\";\r\nimport {TasksType} from \"../../app/App\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {TodoType} from \"../../api/todolist-api\";\r\n\r\nconst initialState: TasksType = {}\r\nexport const tasksReducer = (state = initialState, action: ActionTasksType): TasksType => {\r\n    switch (action.type) {\r\n        case 'SET-TODOS':\r\n            const copyState = {...state}\r\n            action.todos.forEach((tl: TodoType) => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState;\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.id)};\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]};\r\n        case 'UPDATE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)}\r\n        case 'ADD-TODOLIST':\r\n            return {[action.todolist.id]: [], ...state};\r\n        case 'REMOVE-TODOLIST':\r\n            let stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//actions\r\nexport const setTasksAC = (tasks: TaskType[], todolistId: string) => ({type: 'SET-TASKS', tasks, todolistId} as const)\r\nexport const removeTaskAC = (id: string, todolistId: string) => ({type: 'REMOVE-TASK', id, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\n\r\n\r\n//thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionTasksType>) => {\r\n    taskAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(setTasksAC(res.data.items, todolistId))\r\n        })\r\n}\r\nexport const removeTasksTC = (id: string, todolistId: string) => (dispatch: Dispatch<ActionTasksType>) => {\r\n    taskAPI.deleteTask(todolistId, id)\r\n        .then((res) => {\r\n            dispatch(removeTaskAC(id, todolistId))\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionTasksType>) => {\r\n    taskAPI.addTask(todolistId, title)\r\n        .then((res) => {\r\n            dispatch(addTaskAC(res.data.data.item))\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, todolistId: string, model: UpdateDomainTaskModelType) =>\r\n    (dispatch: Dispatch<ActionTasksType>, getState: () => AppRootStateType) => {\r\n\r\n// так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком  // чтобы у неё отобрать остальные св-ва\r\n\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => {\r\n            return t.id === taskId\r\n        })\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: ModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task?.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...model\r\n        }\r\n        if (task) {\r\n            taskAPI.updateTask(todolistId, taskId, apiModel).then(() => {\r\n                dispatch(updateTaskAC(taskId, model, todolistId))\r\n            })\r\n        }\r\n    }\r\n\r\n//types\r\ntype ActionTasksType = ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof addTodoAC>\r\n    | ReturnType<typeof removeTodoAC>\r\n    | ReturnType<typeof setTodosAC>\r\n    | ReturnType<typeof setTasksAC>\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}","import React, {useState} from \"react\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport TextField from \"@mui/material/TextField/TextField\";\r\nimport {AddBox} from \"@mui/icons-material/\";\r\n\r\ntype PropsType = {\r\n    addItem: (title: string) => void\r\n}\r\nexport const AddItemForm: React.FC<PropsType> =React.memo(({addItem}) => {\r\n\r\n    const [title, setTitle] = useState<string>('')\r\n\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onTitleChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onAddTaskClickHandler = () => {\r\n        if (title.trim()) {\r\n            addItem(title.trim())\r\n            setTitle('')\r\n        } else setError('Heading is required!')\r\n    }\r\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        error && setError(null)\r\n        if (e.key === 'Enter') {\r\n            onAddTaskClickHandler()\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField error={!!error}\r\n                       variant={'outlined'}\r\n                       className={error ? 'error' : ''}\r\n                       onChange={onTitleChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       value={title}\r\n                       label={'enter you heading...'}\r\n                       helperText={error}\r\n            />\r\n            <IconButton color={'primary'} size={'large'} onClick={onAddTaskClickHandler}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n})\r\n\r\n","import React, {useState} from \"react\";\r\nimport TextField from \"@mui/material/TextField/TextField\";\r\n\r\ntype PropsType = {\r\n    value: string\r\n    onChange: (value: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<PropsType> = React.memo(({value, onChange}) => {\r\n    const [title, setTitle] = useState<string>(value)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const onDoubleClickHandler = () => {\r\n        setEditMode(true)\r\n    }\r\n    const setViewMode = () => {\r\n        setEditMode(false)\r\n        onChange(title)\r\n    }\r\n    const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n\r\n        editMode\r\n            ? <TextField variant={'outlined'} type={'text'} autoFocus value={title} onChange={onChangeHandler} onBlur={setViewMode}/>\r\n            : <span onDoubleClick={onDoubleClickHandler}>{value}</span>\r\n    )\r\n\r\n}\r\n)\r\n\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport Checkbox from \"@mui/material/Checkbox/Checkbox\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Delete from \"@mui/icons-material/Delete\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/tasks-api\";\r\n\r\n\r\ntype PropsTypes = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (newTitle: string, id: string, todolistId: string) => void\r\n    removeTask: (id: string, todolistId: string) => void\r\n}\r\n\r\nexport const Task: React.FC<PropsTypes> = React.memo((props) => {\r\n    const changeTaskTitleHandler = useCallback((newTitle: string) =>\r\n        props.changeTaskTitle(newTitle, props.task.id, props.todolistId), [props.changeTaskTitle, props.task.id, props.todolistId])\r\n\r\n    const onChangeTaskStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n        props.changeTaskStatus(props.task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n\r\n    return (\r\n        <li className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n            <Checkbox\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n                color={\"secondary\"}\r\n                onChange={onChangeTaskStatus}\r\n            />\r\n            <EditableSpan value={props.task.title} onChange={changeTaskTitleHandler}/>\r\n            <IconButton onClick={onClickHandler}><Delete/></IconButton>\r\n        </li>\r\n    )\r\n})\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/tasks-api\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport Delete from \"@mui/icons-material/Delete\";\r\nimport Button from \"@mui/material/Button/Button\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {FilterType} from \"../todolists-reducer\";\r\nimport {fetchTasksTC} from \"../tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeFilter: (filter: FilterType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodoTitle: (newTitle: string, id: string) => void\r\n    changeTaskTitle: (newTitle: string, id: string, todolistId: string) => void\r\n}\r\n\r\nexport const TodoList = React.memo(function (props: TodoListPropsType) {\r\n        const dispatch = useDispatch()\r\n\r\n        useEffect(() => {\r\n            dispatch(fetchTasksTC(props.id))\r\n        },[])\r\n        let tasksForTodolist = props.tasks\r\n        if (props.filter === 'active') {\r\n            tasksForTodolist = tasksForTodolist.filter(flt => flt.status === TaskStatuses.New)\r\n        }\r\n\r\n        if (props.filter === 'completed') {\r\n            tasksForTodolist = tasksForTodolist.filter(flt => flt.status === TaskStatuses.Completed)\r\n        }\r\n        const addTask = useCallback((title: string) => {\r\n            props.addTask(title, props.id)\r\n\r\n        }, [props.addTask, props.id])\r\n\r\n        const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.changeFilter, props.id])\r\n        const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.changeFilter, props.id])\r\n        const onCompleteClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.changeFilter, props.id])\r\n\r\n        const onRemoveTodoHandler = () => {\r\n            props.removeTodolist(props.id)\r\n        }\r\n        const changeTodoTitleHandler = useCallback((newTitle: string) => props.changeTodoTitle(newTitle, props.id), [props.changeTodoTitle, props.id])\r\n\r\n        return <div>\r\n            <h3>\r\n                <EditableSpan value={props.title} onChange={changeTodoTitleHandler}/>\r\n                <IconButton onClick={onRemoveTodoHandler}><Delete/></IconButton>\r\n            </h3>\r\n\r\n            <AddItemForm addItem={addTask}/>\r\n\r\n            <ul>\r\n                {tasksForTodolist\r\n                    .map(task => <Task key={task.id}\r\n                                       task={task}\r\n                                       todolistId={props.id}\r\n                                       removeTask={props.removeTask}\r\n                                       changeTaskStatus={props.changeTaskStatus}\r\n                                       changeTaskTitle={props.changeTaskTitle}\r\n                        />\r\n                    )}\r\n            </ul>\r\n            <div>\r\n                <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                        onClick={onAllClickHandler}\r\n                        color={'inherit'}>All\r\n                </Button>\r\n                <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                        onClick={onActiveClickHandler}\r\n                        color={'primary'}>Active\r\n                </Button>\r\n                <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                        onClick={onCompleteClickHandler}\r\n                        color={'secondary'}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    }\r\n)","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    addTodoTC,\r\n    changeTodoFilterAC,\r\n    changeTodoTitleTC,\r\n    fetchTodosTC,\r\n    FilterType,\r\n    removeTodoTC,\r\n    TodolistDomainType\r\n} from \"./todolists-reducer\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {addTaskTC, removeTasksTC, updateTaskTC} from \"./tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/tasks-api\";\r\nimport Grid from \"@mui/material/Grid/Grid\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport Paper from \"@mui/material/Paper/Paper\";\r\nimport {TodoList} from \"./Todolist/TodoList\";\r\nimport {TasksType} from \"../../app/App\";\r\n\r\nexport const TodolistsList = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodosTC())\r\n    }, [])\r\n\r\n    const changeFilter = useCallback((filter: FilterType, todolistId: string) => {\r\n        dispatch(changeTodoFilterAC(todolistId, filter))\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodoTC(todolistId))\r\n    }, [dispatch])\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodoTC(title))\r\n    }, [dispatch])\r\n    const changeTodoTitle = useCallback((title: string, id: string) => {\r\n        dispatch(changeTodoTitleTC(id, title))\r\n    }, [dispatch])\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTasksTC(id, todolistId))\r\n    }, [dispatch])\r\n    const changeTaskStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {status},))\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(title, todolistId))\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((title: string, id: string, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {title},))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '30px 0'}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={10}>\r\n                {todolists.map(tl => {\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '25px 45px'}}\r\n                               elevation={5}>\r\n                            <TodoList\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                filter={tl.filter}\r\n                                tasks={tasks[tl.id]}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTaskStatus={changeTaskStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTodoTitle={changeTodoTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Toolbar from \"@mui/material/Toolbar/Toolbar\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport AppBar from \"@mui/material/AppBar/AppBar\";\r\nimport {Menu} from \"@mui/icons-material\";\r\nimport Typography from \"@mui/material/Typography/Typography\";\r\nimport Button from \"@mui/material/Button/Button\";\r\nimport Container from \"@mui/material/Container/Container\";\r\nimport {TaskType} from \"../api/tasks-api\";\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\n\r\nexport type TasksType = {\r\n    [key: string]: TaskType []\r\n}\r\n\r\nexport function App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton edge={'start'} color={'inherit'} aria-label={'menu'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        News\r\n                    </Typography>\r\n                    <Button variant={'outlined'} color={'inherit'}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodolistsList/>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\n// @ts-ignore\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {App} from \"./app/App\";\nimport {store} from \"./app/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App/>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}